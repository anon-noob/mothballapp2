{
    "custom_function": "Create a custom mothball function.",
    "repeat": "Execute the sequence count number of times. Count must be a nonnegative integer.",
    "printdisplay": "Print some text. To print values or evaluate expressions, enclose them in curly brackets {}.",
    "var": "Set a variable_name to equal value, which attempts to convert it to an int, then a float, then a string. If no value is given, it will set it equal to the last outputted value.",
    "setprecision": "Sets the number of decimal places shown in outputs, ranging from 0 to 16 (inclusive) decimal places.",

    "walk": "Walk on the ground for a given duration while facing rotation. Slip indicates the ground slipperiness. Speed and slow are their respective potion amplifiers. This function can be modified by inputs and movement modifiers.",
    "walk45": "The 45 strafe version of walk(). This function can be modified by movement modifiers, but not by inputs.",
    "sprint": "Sprint on the ground for a given duration while facing rotation. Slip indicates the ground slipperiness. Speed and slow are their respective potion amplifiers. This function can be modified by inputs and movement modifiers.",
    "sprint45": "The 45 strafe version of sprint(). This function can be modified by movement modifiers, but not by inputs.",
    "walkair": "Move while midair for a given duration while facing rotation. This function can be modified by inputs and movement modifiers.",
    "walkair45": "The 45 strafe version of walkair(). This function can be modified by movement modifiers, but not by inputs.",
    "sprintair": "Sprint while midair for a given duration while facing rotation. This function can be modified by inputs and movement modifiers.\nNote to sprint air delay: In Minecrraft versions 1.19.3 and below, sprint is delayed by 1 tick if activated/deactivated midair, whereas in 1.19.4 and above, this delay is removed.",
    "sprintair45": "The 45 strafe version of sprintair(). This function can be modified by movement modifiers, but not by inputs.",
    "walkjump": "Jump without sprint for a given duration while facing rotation. After the first tick, all subsequent ticks are airborn, equivalent to walkair(). Slip indicates the ground slipperiness. Speed and slow are their respective potion amplifiers. This function can be modified by inputs and movement modifiers.",
    "walkjump45": "The 45 strafe version of walkjump(). This function can be modified by movement modifiers, but not by inputs.",
    "sprintjump": "Jump with sprint for a given duration while facing rotation. After the first tick, all subsequent ticks are airborn, equivalent to sprintair(). Slip indicates the ground slipperiness. Speed and slow are their respective potion amplifiers. This function can be modified by inputs and movement modifiers.",
    "sprintjump45": "The 45 strafe version of sprintjump(). This function can be modified by movement modifiers, but not by inputs.\nNote on sprintjump 45 strafes: The best way to gain maximum distance is to sprintjump facing straight, then turn 45 while midair. This is different to walk movement where it is always best to face 45. Therefore, sprintjump45(t) = sprintjump(1) sprintair45(t-1)",
    "sprintstrafejump": "Equivalent to sprintjump.wa but the angle is optimized to give the most distance. Jump with sprint AND strafe for a given duration while facing rotation. After the first tick, all subsequent ticks are airborn, equivalent to sprintair(). Slip indicates the ground slipperiness. Speed and slow are their respective potion amplifiers. This function can be modified by movement modifiers, but not by inputs. Note that sprintstrafejump is weaker than sprintjump.",
    "sprintstrafejump45": "The 45 strafe version of sprintstrafejump(). This function can be modified by movement modifiers, but not by inputs.\nNote on sprintstrafejump 45 strafes: This function is equivalent to sprintstrafejump45(t) = sprintstrafejump(1) sprintair45(t-1)",
    "sneak": "Move while sneaking for a given duration while facing rotation. Slip indicates the ground slipperiness. Speed and slow are their respective potion amplifiers. This function can be modified by inputs and movement modifiers.",
    "sneak45": "The 45 strafe version of sneak(). This function can be modified by movement modifiers, but not by inputs.",
    "sneakair": "Wile airborn, move while sneaking for a given duration while facing rotation. This function can be modified by inputs and movement modifiers.",
    "sneakair45": "The 45 strafe version of sneakair(). This function can be modified by movement modifiers, but not by inputs.",
    "sneakjump": "Jump while sneaking for a given duration while facing rotation. After the first tick, all subsequent ticks are airborn, equivalent to sneakair(). Slip indicates the ground slipperiness. Speed and slow are their respective potion amplifiers. This function can be modified by inputs and movement modifiers.",
    "sneakjump45": "The 45 strafe version of sneakjump(). This function can be modified by movement modifiers, but not by inputs.",
    "stop": "Release all movement inputs for a given duration. Slip indicates the ground slipperiness. Note that the player might still be moving from residual momentum.",
    "stopair": "While airborn, release all movement inputs for a given duration. Note that the player might still be moving from residual momentum.",
    "stopjump": "Jump in place for a given duration. After the first tick, all subsequent ticks are airborn, equivalent to stopair(). Slip indicates the ground slipperiness. Note that the player might still be moving from residual momentum.",
    "sneakstop": "The sneak version of stop(), may be useful when dealing with sneak delay.",
    "sneakstopair": "The sneak version of stopair(), may be useful when dealing with sneak delay.",
    "sneakjumpair": "The sneak version of stopjump(), may be useful when dealing with sneak delay.",
    "sneaksprint": "Sneak and sprint on the ground for a given duration while facing rotation. Slip indicates the ground slipperiness. Speed and slow are their respective potion amplifiers. This function can be modified by inputs and movement modifiers. Note that sneaksprint is only valid in versions 1.14 and above, and that the player must be sprinting before sneaking in order to sneaksprint.",
    "sneaksprint45": "The 45 strafe version of sneaksprint(). This function can be modified by movement modifiers, but not by inputs.",
    "sneaksprintair": "While midair, sneak and sprint for a given duration while facing rotation. This function can be modified by inputs and movement modifiers. Note that sneaksprintair is only valid in versions 1.14 and above, and that the player must be sprinting before sneaking in order to sneaksprintair. This includes sprint air delay and sneak delay.",
    "sneaksprintair45": "The 45 strafe version of sneaksprintair(). This function can be modified by movement modifiers, but not by inputs.",
    "sneaksprintjump": "Jump with sprint for a given duration while facing rotation. After the first tick, all subsequent ticks are airborn, equivalent to sneaksprintair(). Slip indicates the ground slipperiness. Speed and slow are their respective potion amplifiers. This function can be modified by inputs and movement modifiers. Note that sneaksprintjump is only valid in versions 1.14 and above, and that the player must be sprinting before sneaking in order to sneaksprintjump.",
    "sneaksprintjump45": "The 45 strafe version of sprintjump(). This function can be modified by movement modifiers, but not by inputs.\nNote on sneaksprintjump 45 strafes: The best way to gain maximum distance is to sprintjump at a specific angle, then turn 45 while midair. This is different to walk movement where it is always best to face 45. This is also different to normal sprint jump 45 strafes where the best jump angle is always straight. Mothball will automatically find the best jump angle that maximizes distance. This function is equivalent to sneaksprintjump45(t) = sneaksprintjump(1) sneaksprintair45(t-1)",
    "walkpessi":"walkpessi(x) is equivalent to stopjump walkair(x-1). This function can be modified by inputs and movement modifiers.",
    "walkpessi45":"The 45 strafe version of walkpessi(). This function can be modified by movement modifiers, but not by inputs.",
    "sprintpessi":"sprintpessi(x) is equivalent to stopjump sprintair(x-1). This function can be modified by inputs and movement modifiers.",
    "sprintpessi45":"The 45 strafe version of sprintpessi(). This function can be modified by movement modifiers, but not by inputs.",
    "forcemomentum":"fmm(x, t) is equivalent to walkjump(t) sprintair(x-t). This function can be modified by inputs and movement modifiers.",
    "forcemomentum45":"This function can be modified by movement modifiers, but not by inputs.",
    

    "outz": "Outputs the player's z position.\noutz: number\nIf centered_about is not 0, output as an expression\noutz: centered_about + (number - centered_about)",
    "zmm": "Outputs the player's z position in terms of momentum used. Mathematically, this means zmm = outz - 0.6 if outz is positive, else zmm = outz + 0.6\nzmm: number\nIf centered_about is not 0, output as an expression\nzmm: centered_about + (number - centered_about)",
    "zb": "Outputs the player's z position in terms of blocks traveled. Mathematically, this means zb = outz + 0.6 if outz is positive, else zb = outz - 0.6\nzb: number\nIf centered_about is not 0, output as an expression\nzb: centered_about + (number - centered_about)",
    "outvz": "Outputs the player's z velocity.\nvz: number\nIf centered_about is not 0, output as an expression\nvz: centered_about + (number - centered_about)",
    "outx": "Outputs the player's x position.\noutx: number\nIf centered_about is not 0, output as an expression\noutx: centered_about + (number - centered_about)",
    "xmm": "Outputs the player's x position in terms of momentum used. Mathematically, this means xmm = outx - 0.6 if outx is positive, else xmm = outx + 0.6\nxmm: number\nIf centered_about is not 0, output as an expression\nxmm: centered_about + (number - centered_about)",
    "xb": "Outputs the player's x position in terms of blocks traveled. Mathematically, this means xb = outx + 0.6 if outx is positive, else xb = outx - 0.6\nxb: number\nIf centered_about is not 0, output as an expression\nxb: centered_about + (number - centered_about)",
    "outvx": "Outputs the player's x velocity.\nvx: number\nIf centered_about is not 0, output as an expression\nvx: centered_about + (number - centered_about)",
    "vec": "Outputs the player's Speed (the vector norm, sqrt(vz^2 + vx^2)) and Angle in degrees (given by arctan(-vx, vz))",
    "outangle": "Output the player's rotation for that tick.\nfacing: number\nIf centered_about is not 0, output as an expression\nfacing: centered_about + (number - centered_about)",
    "outturn": "Output the degrees turned for that tick.\turn: number\nIf centered_about is not 0, output as an expression\nturn: centered_about + (number - centered_about)",
    "effectsmultiplier": "Display the percent change to base movement speed. If speed or slow isn't provided, use the player's current default. This function DOES NOT set the current default speed and slow potion effects. Speed and slow only affect ground movement. The formula is\nM = max((1 + (0.2 * speed)) * (1 - (0.15 * slow)), 0)\nNote that if M is 0 (slow is 7 or above), the player cannot begin moving when on ground.",
    "face": "Set the player's default rotation in degrees",
    "angleinfo": "Get information on an angle, including its normal, table lookup index, and the trigonometric values. If the normal is not 1 (give or take within e-7 tolerance), then this angle is a \"half angle\"",

    "turn": "Rotate the player's default rotation in degrees",
    "setposz": "Set the player's Z position",
    "setposx": "Set the player's X position",
    "setvz": "Set the player's Z velocity",
    "setvx": "Set the player's X velocity",
    "setslip": "Set the player's ground slipperiness. Some notable slip values:\nNormal: 0.6\nIce and Packed Ice: 0.98\nBlue Ice (modern versions): 0.989\nSlime: 0.8\nAir is considered to have a slip of 1.0.",
    "inertia": "Set the inertia threshold. The inertia theshold is the maximum speed needed to negate momentum on the next tick. Thus, if |S * V * 0.91| < T with S being the slip value, V being the velocity, and T being the threshold, then momentum is negated on the next tick. In versions 1.8, T = 0.005. In 1.9 and above, T = 0.003.\nIn versions 1.21.4 and below, inertia is calculated based on X and Z velocities separately (single_axis = True). In versions 1.21.5 and above, it is calculated with the total velocity (single_axis = False).",
    "sprintairdelay": "Toggle on with `true` or off with `false`. If toggled, it takes 1 tick longer to activate sprint in midair if the previous tick was unsprinted. Versions 1.8 to 1.19 have a sprint air delay while later versions don't, so if you intend to calculate 1.20+ movement, set sprint air delay to `false`.",
    "sneakdelay": "Toggle on with `true` or off with `false`. If toggled, it takes 1 tick longer to activate sneak if the previous tick didn't sneak. Versions 1.8 to 1.19 dont have a sneak delay while later versions do, so if you intend to calculate 1.20+ movement, set sneak delay to `true`.",
    "singleaxisinertia": "Toggle on with `true` or off with `false`. If toggled, inertia calculations will follow versions 1.8 to 1.21.4 where inertia is calculated per axis velocities instead of the total speed.",
    "version": "Convenience function to set the simulation properties based on a minecaft version. This includes inertia threshold, inertia axis, sneak delay, and sprint air delay. The version string is in the format `major.minor.patch`. As of right now, major = 1.",
    "speed": "Sets the player's speed potion effect, ranging from 0 to 255",
    "slowness": "Sets the player's slowness potion effect, ranging from 0 to 255. Slowness 7 and above are equivalent and result in the player not being able to begin moving while on ground. See effectsmultiplier() for details",
    "anglequeue": "Addsangles to the rotation queue, each angle being used for 1 tick. In mothball syntax, `anglequeue(1,-2,3) walk(3)` is the same as `face(1) walk face(-2) walk face(3) walk`",
    "turnqueue": "Adds `angles` to the rotation queue, each tick turning `angle` degrees. In mothball syntax, `turnqueue(1,-2,3) walk(3)` is the same as `turn(1) walk turn(-2) walk turn(3) walk`",
    "possibilities": "Displays ticks where while `sequence` is run, the player reaches certain block milestones ONLY ON Z (as determined by `increment`, default 0.0625) less than or equal to `min_distance`, useful to check which tiers results in precise landings.\nUse `offset` to offset each tick accordingly. An offset of 0.6 (which is default) is for jumping from block to block. An offset of -0.6 is for z neos. An offset of 0 will just record pure distances, helpful for example doing block avoid jumps.\n`increment` is set to 0.0625 by default, but in modern versions you can set it to 0.03125 for useful results with newer blocks.\nIf a float for 'miss` is provided, it will also display ticks that are `miss` away from reaching a milestone.",
    "xpossibilities": "The x version of possibilities()",
    "xzpossibilities": "The x and z version of possibilities()",
    "xinertialistener": "Displays ticks where while `sequence` is run, the player's x velocity hits inertia.",
    "zinertialistener": "Displays ticks where while `sequence` is run, the player's z velocity hits inertia.",
    "inertialistener": "xinertialistener() and zinertialistener() combined",
    "ballhelp": "Get help on a function",
    "dimensions": "Get information on an x by z distance",
    "taps": "Runs each sequence until the player fully stops **on the ground**, or based on the most recent modifiers used. If a number is passed, execute the previous sequence that many times.\nSequences can be provided as standalone arguments which will run once, or it can have a number following it, indicating how many times to execute it.\nNOTE 1: Sneak delay is toggled off while executing taps.\nNOTE 2: To do air taps, provide all necessary air ticks, for example `taps(stj sa sta(10))` is not the same as `taps(sa)`\nExample: `taps(sneak, 3)`. Execute `sneak` and stop moving until the player is stationary, for a total of 3 times. In parkour notation, this is equivalent to '3st W' or '3 shift tap W'\nExample: `taps(walk, stj sneakair sta(10), 2)` executes `walk` once and `stj sneakair sta(10)` twice. In parkour notation, '1ut W 2ast W'.\nExample: `taps(walk[water](5))` walk while in water for 5t, then stops in water since the player was in water.",
    "bwmm": "Attempts to find the speed such that executing `sequence` results in using `zmm` blocks of momentum on the Z axis. A warning is raised if the simulation using the calculated speed doesn't match `zmm`, most likely meaning that inertia was encountered while simulating.",
    "wall": "Attempts to find the speed such that executing `sequence` results in a displacement of `z` on the Z axis. A warning is raised if the simulation using the calculated speed doesn't match `z`, meaning that inertia was encountered while simulating.",
    "blocks": "Attempts to find the speed such that executing `sequence` results in traversing `zb` blocks on the Z axis. A warning is raised if the simulation using the calculated speed doesn't match `zb`, meaning that inertia was encountered while simulating.",
    "xbwmm": "The x version of bwmm()",
    "xwall": "The x version of wall()",
    "xblocks": "The x version of blocks()",

    "jump": "Jump up. After the first tick, all subsequent ticks are airborn, equivalent to air()",
    "air": "Free fall in air",
    "outy": "Outputs the player's bottom y position (based on their feet, which is standard)",
    "outty": "Outputs the player's y top position (based on their head)",
    "outsty": "Outputs the player's y sneak top position (based on their head while sneaking). This correlates to sneaking reducing the player's height in 1.14+.",
    "slime": "Bonuce on the slime at a given height.",
    "setceiling": "Set the ceiling of the simulation. Set it to 0 to indicate no ceiling.",
    "setvy": "Set the player's y velocity",
    "up": "Move up (in a block). This function should be accomodated with a movement modifier such as water, ladder, lava.",
    "down": "Move down (in a block). This function should be accomodated with a movement modifier such as water, ladder, lava.",
    "height":"Calculate the change in y position assuming jumping with a given ceiling (example, 3 block ceiling) with some jump boost. If inertia is not provided, it will use the current inertia threshold.",
    "duration":"Calclate the number of ticks it takes to jump and land to the floor (example, floor = -8) given a ceiling (example, 3 block ceiling) with some jump boost. If inertia is not provided, it will use the current inertia threshold.",
    "blip":"Calculates at most `blip` blips, blipping with the blip height (or the height difference between the higher and lower blocks). If inertia is not provided, it will use the current inertia threshold. If init_height is not given, it will default to start on the higher block. If init_vy is not given, it will use the standard jump velocity formulas, including jump boost. Note that these kinds of blips are only useful in minecraft versions 1.8."
}