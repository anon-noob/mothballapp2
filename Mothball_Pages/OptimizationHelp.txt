# Calculation Based Functions
Mothball provides several functions that assist in calculating and outputting complex operations. Before continuing on, you should be familiar with what `outz zb zmm` are and their differences. Below are some of these special functions:

`bwmm` and `xbwmm` - given the movement sequence, finds the backward speed that perfectly uses `zmm/xmm`
`wall` and `xwall` - given the movement sequence, finds the backward speed that perfectly uses `outz/outx`
`blocks` and `xblocks` - given the movement sequence, finds the backward speed that perfectly uses `zb/xb`
`repeat` or `r` - repeat the sequence a given number of times
`poss/xposs/xzposs` - list all ticks that land some offset past a pixel on the z/x/x&z axis.
`taps` - in between each movement, wait until the player stops moving.

# Optimization Functions
These functions include `bwmm xbwmm wall xwall blocks xblocks`. They take two arguments. First is a number, also called the target distance, and the second is the Mothball code. What they do is they find the right speed so that whatever is run in the Mothball code, the player's position traverses the target distance. The target distance corresponds to how that distance is measured. For example, `bwmm` optimizes for `zmm`, `wall` optimizes for `outz`, `blocks` optimizes for `zb`, and same thing for the x versions.

## Example using bwmm
Let's look at an example. Suppose I would like to know how much speed I would need to fit `sj45(12)` into 1 block of momentum. The Mothball code is

```mothball/output
bwmm(1, sj45(12))
```

so i would need a z speed of -0.2929913. To double check this, we can add a zmm(1) at the end to see that we really do use up exactly 1 block of momentum.

```mothball/output
bwmm(1, sj45(12)) zmm(1)
```

Just a little note, putting `zmm(1)` inside or outside the `bwmm` doesn't make a difference, as `zmm(1)` is not a movement related function.

## Example using wall
Let's see another example. What if we wanted to fit `wj45 sa45(11) s45` into 1 block of distance, a 1bm frontwall if you will? Since we are dealing with a frontwall, we know that we want to optimize based on `outz(1)` so we use `wall` to do this.

```mothball/output
wall(1, wj45 sa45(11) s45) outz(1)
```

so we need -0.2009824 z speed.

## Prefixing Optimization Functions
So far, we have been doing this under the assumption that we are on the ground before the sequence inside the function begins. In the last example, Mothball said that we need -0.2009824 z speed to fit a 1bm frontwall momentum. That z speed must be achieved by running on the ground on the tick before the main sequence. What if instead we wanted the z speed to be for air? Simple, we let Mothball know by prefixing  an air movement function before the optimize function. It doesn't matter which function, as long as its air movement.

```mothball/output
sta wall(1, wj45 sa45(11) s45) outz(1)
```

Now the speed is different, although this is worse than getting the required speed on the ground. A good way to test this is to add `vec` at the end of the sequence and compare.

## Inertia Issues and Workarounds
But there's also another twist! Sometimes, the required z speed given yields an unexpected result! To see this, let's try optimizing for `zmm(2)` with the sequence `sj(12)`. Assume we are starting on ground, as that is typically the best strat.

```mothball/output
bwmm(2, sj(12)) zmm(2)
```

See the warning? We've encountered inertia, and as a result, the actual momentum use does not equal 2. So what do we do!?

### Change the Angles
One way to resolve this is by changing some angles.

```mothball/output
bwmm(2, sj(1, 10.01) sa(11)) zmm(2)
```

We can also try prefixing different movement. Let's try starting on air.

```mothball/output
sta bwmm(2, sj(1, 10.01) sa(11)) zmm(2)
```

In this case, this doesn't work, but there will be scenarios where it will be beneficial.

### Different Strat
Maybe the strat we thought would work just... can't work! In that case, we can find a different strat. For the `zmm(2)` case, there is a different strat. Don't worry if this strat is confusing.

```mothball/output
bwmm(2, sj(1, 10.01) sa(11)) zmm(2)
```

It is up to you to see how to work around inertia issues.

# The Repeat Function
Every language has repetition, whether that is spoken language or a programming language (we call them loops). Mothball obviously provides its own loop function `repeat`, or `r` for short. This function takes two arguments. The first one is the Mothball code, and the second one is the number of times to loop. 

How can we use the `repeat` function to sprint jump 10 times?
```mothball
repeat( sj(12), 10 )
```

Suppose we want to print numbers from 1 to 100. How can we use the `repeat` function to do this?

```mothball
var(num, 1)
repeat( print({num}) var(num, num + 1), 100)
```

# The Possibilities Functions
Using these functions `poss xposs xzposs`, we can find ticks where a given Mothball sequence makes a certain pixel distance by a small enough offset. Basically, it outputs all ticks where the distance is `a * (0.0625) + b` with `b` being sufficiently small, for example `5.5625 + 0.002`

These functions take 2 main arguments. The first one is the Mothball code, and the second one is the maximum offset to display, a.k.a. how much does the player land by. 

Let's suppose we want to find potentially precise jumps for a 6 block momentum single 45 jump, and we want to look for jumps whose offset is less than 0.005.

```mothball/output
sj(12) sj(12) zmm(6) | poss(sj45(30), 0.005)
```

Based on the result, we found 3 candidate jump distances with offsets less than 0.005. The choice of `sj45(30)` being 30 ticks is arbitrary. It just means we will see results up to 30 ticks of airtime.

### Calculating for `zb/outz/zmm`
Mothball does the `poss` calcluations in terms of `zb` by default, which is the distance for "block to block" distance jumps. What if instead we wanted to find other landings, such as backwalled landings? We can tell Mothball to offset the numbers in its 3rd argument called `offset`. By default, this is set to `0.6` which is equivalent to `zb/xb`. Setting it to `0` makes it calculate like `outz/outx`, and `-0.6` for `zmm/xmm`. Let's see what backwalled landing we can find with the same momentum and strat.

```mothball/output
sj(12) sj(12) zmm(6) | poss(sj45(30), 0.005, 0)
```

We only found one this time, at tick 25.

The offset is the same even if we are going the opposite direction. Mothball will interpret `0.6` to mean "measure the distance in terms of `zb`", likewise for `0` and `-0.6`. Below, we show what happens when we face 180 instead of 0.

```mothball/output
f(180) sj(12) sj(12) zmm(6) | poss(sj45(30), 0.005, 0)
```

### Near Misses
If you, for some reason, want to check if there are any near misses, you can! Using the keyword argument `miss = offset`, it will display all ticks where the distance traveled misses the next pixel distance by at most `offset`. In math equations, it displays `a * (0.0625) - b` with `b` being the offset.

```mothball/output
bwmm(2, sj45(12)) | poss( sj45(30), 0.01, miss=0.001)
```

Yea... that tick 27 is one unfortunate miss.

### Increments
In modern versions, there are blocks that are not a pixel (0.0625) length; some are half a pixel. In order to be able to catch these distances, you can provide the `increment` keyword argument. By default, it is `0.0625`, incrementing by a pixel. For the half pixel case, we would set `increment=0.03125`. Here's what it looks like.

```mothball/output
bwmm(1, sj.wa(1, 35) sa45(11)) | poss(sj45(15), 0.0015, increment=0.03125)
```

See tick 12? `4.40625 = 4 + 0.0625 * (6.5)`.

## XZ-variant
The `xzposs` function combines both `poss` (for z) and `xposs` together. The minimum landing offset considered for both x and z, and will only display if it lands on both x and z. You can offset the x and z axis accordingly if, for example, you wish to calculate `zb` and `outx` at the same time. You can also use the `miss` keyword argument, which will display whenever either x or z has a near miss. Lastly, the increments can be set for each axis, default `0.0625` of course. 

## Taps
This function simulates movement, then releases all inputs on the ground, or based on the last used modifiers, until the player stops moving. 

This function inputs Mothball sequences and integers. The syntax is `taps(seq1[, count1], seq2[, count2], ...)` which can accept any number of sequences and `countX` tells Mothball how many times to execute `seqX`. Anything in brackets is optional, that is, you are not required to pass an integer for each `count`. If you don't, its corresponding sequence will execute once.

For example, if you want to do 3 shift taps, you would do
```mothball/output
taps(sneak, 3)
```

and for 1 unshift tap W and 2 shift tap D,
```mothball/output
taps(walk, sneak, 2)
# More explicitly: taps(walk, 1, sneak, 2)
```

Sneak delay is toggled off while executing inside `taps`.

For air taps (or air movement in general), you should include all necessary air ticks. For example, `taps(sa)` will be treated as `sa st(n)` whereas `taps(stj sa sta(10))` will be treated as `stj sa sta(10) st(n)`.

For movement affected by modifiers (water, lava, etc), Mothball will assume that you will stop while inside these modifiers based on the last movement function. Example: 

```mothball/output
taps(walk[water](5))
```

will stop while inside water, while

```mothball/output
taps(walk[water](5) stop)
```

will stop on normal ground because the last movement function was `stop` with no modifiers.